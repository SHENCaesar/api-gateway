// Code generated by hertz generator.

package main

import (
	"bytes"
	"os"
	"time"

	handler "github.com/SHENCaesar/api-gateway/hz-gateway/biz/handler"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/genericclient"
	"github.com/cloudwego/kitex/pkg/discovery"
	"github.com/cloudwego/kitex/pkg/generic"
	etcd "github.com/kitex-contrib/registry-etcd"
)

// customizeRegister registers customize routers.
func customizedRegister(r *server.Hertz) {
	r.GET("/ping", handler.Ping)

	registerGateway(r)
	// your code ...
}
func registerGateway(r *server.Hertz) {
	group := r.Group("/gateway")
	idlPath := "../idl/student.thrift"
	resolver, err := etcd.NewEtcdResolver([]string{"127.0.0.1:2379"})
	if err != nil {
		hlog.Fatalf("Failed to create etcd resolver: %v", err)
	}
	go watchIDLFile(idlPath, resolver)

	group.POST("/:service", handler.HttpGateway)
}

func watchIDLFile(idlPath string, resolver discovery.Resolver) {
	content, err := os.ReadFile(idlPath)
	if err != nil {
		hlog.Fatalf("Failed to read IDL file: %v", err)
	}

	serviceName := "student"
	updateClient(content, serviceName, resolver)

	ticker := time.NewTicker(3 * time.Second)
	for {
		select {
		case <-ticker.C:
			newContent, err := os.ReadFile(idlPath)
			if err != nil {
				hlog.Errorf("Failed to read IDL file during watch: %v", err)
				continue
			}
			if !bytes.Equal(newContent, content) {
				updateClient(newContent, serviceName, resolver)
				content = newContent
				hlog.Info("IDL updated successfully!")
			}
		}
	}
}

func updateClient(content []byte, serviceName string, resolver discovery.Resolver) {
	p, err := generic.NewThriftContentProvider(string(content), map[string]string{})
	if err != nil {
		hlog.Fatalf("Failed to create new thrift content provider: %v", err)
	}
	g, err := generic.HTTPThriftGeneric(p)
	if err != nil {
		hlog.Fatalf("Failed to create new http thrift generic: %v", err)
	}

	cli, err := genericclient.NewClient(serviceName, g, client.WithResolver(resolver))
	if err != nil {
		hlog.Fatalf("Failed to create new http generic client: %v", err)
	}
	handler.ServiceMap.Store(serviceName, cli)
}
